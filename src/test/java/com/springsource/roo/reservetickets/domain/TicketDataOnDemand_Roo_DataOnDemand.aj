// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.roo.reservetickets.domain;

import com.springsource.roo.reservetickets.domain.PriceDataOnDemand;
import com.springsource.roo.reservetickets.domain.ShowDataOnDemand;
import com.springsource.roo.reservetickets.domain.Ticket;
import com.springsource.roo.reservetickets.domain.TicketDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TicketDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TicketDataOnDemand: @Component;
    
    private Random TicketDataOnDemand.rnd = new SecureRandom();
    
    private List<Ticket> TicketDataOnDemand.data;
    
    @Autowired
    PriceDataOnDemand TicketDataOnDemand.priceDataOnDemand;
    
    @Autowired
    ShowDataOnDemand TicketDataOnDemand.showDataOnDemand;
    
    public Ticket TicketDataOnDemand.getNewTransientTicket(int index) {
        Ticket obj = new Ticket();
        setPlaceNumber(obj, index);
        setReserveCheck(obj, index);
        setRowNumber(obj, index);
        return obj;
    }
    
    public void TicketDataOnDemand.setPlaceNumber(Ticket obj, int index) {
        int placeNumber = index;
        obj.setPlaceNumber(placeNumber);
    }
    
    public void TicketDataOnDemand.setReserveCheck(Ticket obj, int index) {
        String reserveCheck = "reserveCheck_" + index;
        obj.setReserveCheck(reserveCheck);
    }
    
    public void TicketDataOnDemand.setRowNumber(Ticket obj, int index) {
        int rowNumber = index;
        obj.setRowNumber(rowNumber);
    }
    
    public Ticket TicketDataOnDemand.getSpecificTicket(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Ticket obj = data.get(index);
        Long id = obj.getId();
        return Ticket.findTicket(id);
    }
    
    public Ticket TicketDataOnDemand.getRandomTicket() {
        init();
        Ticket obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Ticket.findTicket(id);
    }
    
    public boolean TicketDataOnDemand.modifyTicket(Ticket obj) {
        return false;
    }
    
    public void TicketDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Ticket.findTicketEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Ticket' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Ticket>();
        for (int i = 0; i < 10; i++) {
            Ticket obj = getNewTransientTicket(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
